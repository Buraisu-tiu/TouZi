{% extends "base.html.jinja2" %}

{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: #fff;
    }

    body {
        background-color: var(--background-color, #0a0a0a);
        color: white;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .dashboard {
        width: 100vw;
        min-height: 100vh;
        margin: 0;
        padding: 2rem;
        background: 
            radial-gradient(circle at top right, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}15 0%, 
                transparent 60%),
            var(--background-color);
        position: relative;
        box-sizing: border-box;
    }

    .dashboard-header {
        margin-bottom: 3rem !important;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 24px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        display: inline-block;
    }

    .dashboard-title::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 0;
        width: 60px;
        height: 4px;
        background: var(--accent-color);
        border-radius: 2px;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 1.5rem;
        padding: 1rem;
        max-width: 1600px;
        margin: 0 auto;
    }

    .card {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 2rem;
        margin: 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
        height: 100%;
        transition: transform 0.3s ease, border-color 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin-bottom: 2rem;
    }

    /* Portfolio Stock Selector */
    .portfolio-selector {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stock-card {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .stock-card:hover {
        transform: translateY(-5px);
        border-color: var(--accent-color);
        background: rgba(0, 0, 0, 0.3);
    }

    .stock-card.selected {
        border-color: var(--accent-color);
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.15);
    }

    .stock-card.selected::after {
        content: 'âœ“';
        position: absolute;
        top: 15px;
        right: 15px;
        background: var(--accent-color);
        color: var(--background-color);
        height: 24px;
        width: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        font-weight: bold;
    }

    .stock-symbol {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .stock-info {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin-top: 1rem;
    }

    .stock-data {
        font-size: 1.2rem;
        font-weight: 600;
    }

    .stock-label {
        font-size: 0.8rem;
        text-transform: uppercase;
        opacity: 0.7;
        margin-top: 0.2rem;
    }

    /* Order Form */
    .order-form {
        padding: 1rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        margin-top: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
    }

    input {
        width: 100%;
        padding: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        color: var(--text-color);
        font-size: 1rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }

    input:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 2px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .submit-button {
        width: 100%;
        padding: 1.25rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: var(--background-color);
        border: none;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .submit-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.4);
    }

    .submit-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .order-summary {
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary h3 {
        margin-bottom: 1rem;
        font-size: 1.1rem;
        color: var(--accent-color);
    }

    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: 600;
    }

    .empty-message {
        text-align: center;
        padding: 3rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        margin: 2rem 0;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .empty-subtitle {
        font-size: 1rem;
        opacity: 0.7;
        margin-bottom: 2rem;
    }

    .buy-link {
        display: inline-block;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: var(--background-color);
        border-radius: 12px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .buy-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.4);
    }

    .positive { color: #4caf50; }
    .negative { color: #f44336; }

    @media (max-width: 768px) {
        .dashboard-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .dashboard-actions {
            margin-left: 0;
        }
        
        .dashboard-grid {
            gap: 1rem;
        }
        
        .portfolio-selector {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Sell Assets</h1>
        <div class="dashboard-actions">
            <div class="user-balance" style="font-size: 1.25rem; font-weight: 600;">
                Available Balance: ${{ "%.2f"|format(user.balance|default(0)) }}
            </div>
        </div>
    </div>

    <div class="dashboard-grid">
        <div class="card" style="grid-column: span 12;">
            {% if positions and positions|length > 0 %}
                <h2 class="card-title">Select a Stock to Sell</h2>
                
                <!-- Portfolio Stock Selector -->
                <div class="portfolio-selector">
                    {% for position in positions %}
                        <div class="stock-card" data-symbol="{{ position.symbol }}" data-shares="{{ position.shares }}" data-price="{{ position.current_price }}">
                            <div class="stock-symbol">{{ position.symbol }}</div>
                            <div class="stock-info">
                                <div>
                                    <div class="stock-data">{{ position.shares }}</div>
                                    <div class="stock-label">Shares</div>
                                </div>
                                <div>
                                    <div class="stock-data">${{ "%.2f"|format(position.current_price) }}</div>
                                    <div class="stock-label">Current Price</div>
                                </div>
                                <div>
                                    <div class="stock-data">${{ "%.2f"|format(position.shares * position.current_price) }}</div>
                                    <div class="stock-label">Value</div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                
                <!-- Sell Order Form - SIMPLIFIED EMERGENCY VERSION -->
                <form id="sellForm" method="POST" action="{{ url_for('trading.sell') }}" class="order-form">
                    <input type="hidden" id="selected_symbol" name="symbol" value="">
                    
                    <div class="form-group">
                        <label for="shares">Number of Shares to Sell</label>
                        <input type="number" id="shares" name="shares" step="0.01" min="0.01" placeholder="Enter quantity" required disabled>
                    </div>
                    
                    <div id="sellSummary" class="order-summary" style="display: none;">
                        <h3>Order Summary</h3>
                        <div class="order-summary-item">
                            <span>Estimated Value:</span>
                            <span id="estimatedValue">$0.00</span>
                        </div>
                        <div class="order-summary-item">
                            <span>Trading Fee:</span>
                            <span id="tradingFee">$0.00</span>
                        </div>
                        <div class="order-summary-item">
                            <span>Net Proceeds:</span>
                            <span id="netProceeds">$0.00</span>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                        <button type="submit" class="submit-button" id="sellButton" disabled>Execute Sale</button>
                    </div>
                    
                    <!-- Emergency Direct Submit Option -->
                    <div id="emergencySubmit" style="background-color: rgba(255,0,0,0.1); padding: 10px; border-radius: 5px; margin-top: 10px; display: none;">
                        <h4 style="color: #ff5252">Emergency Direct Submit</h4>
                        <p>If the regular submit button doesn't work, use this section:</p>
                        <div style="display: flex; gap: 10px; margin-top: 10px;">
                            <select id="directSymbol" style="flex: 1; padding: 10px; background: rgba(0,0,0,0.5); color: white; border-radius: 5px;">
                                {% for position in positions %}
                                    <option value="{{ position.symbol }}">{{ position.symbol }} ({{ position.shares }} shares)</option>
                                {% endfor %}
                            </select>
                            <input type="number" id="directShares" placeholder="Shares" min="0.01" step="0.01" style="flex: 1; padding: 10px; background: rgba(0,0,0,0.5); color: white; border-radius: 5px;">
                            <button type="button" id="directSubmitBtn" style="padding: 10px 20px; background: #ff5252; color: white; border: none; border-radius: 5px; cursor: pointer;">SELL NOW</button>
                        </div>
                    </div>
                </form>
            {% else %}
                <div class="empty-message">
                    <h3 class="empty-title">No Stocks to Sell</h3>
                    <p class="empty-subtitle">You currently don't have any stocks in your portfolio.</p>
                    <a href="{{ url_for('trading.buy') }}" class="buy-link">Buy Stocks</a>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get DOM elements
    const stockCards = document.querySelectorAll('.stock-card');
    const selectedSymbolInput = document.getElementById('selected_symbol');
    const sharesInput = document.getElementById('shares');
    const sellSummary = document.getElementById('sellSummary');
    const estimatedValueSpan = document.getElementById('estimatedValue');
    const tradingFeeSpan = document.getElementById('tradingFee');
    const netProceedsSpan = document.getElementById('netProceeds');
    const sellButton = document.getElementById('sellButton');
    
    // Store position data
    let currentSelection = null;
    
    // Add click event to stock cards
    stockCards.forEach(card => {
        card.addEventListener('click', function() {
            // Remove selection from all cards
            stockCards.forEach(c => c.classList.remove('selected'));
            
            // Add selection to clicked card
            this.classList.add('selected');
            
            // Get data from card
            const symbol = this.dataset.symbol;
            const maxShares = parseFloat(this.dataset.shares) || 0;
            
            // Debug logging
            console.log("Price attribute value:", this.dataset.price);
            
            // Parse price with fallback
            let price = parseFloat(this.dataset.price);
            if (isNaN(price) || price <= 0) {
                // If price is invalid, extract it from the display text
                const priceElement = this.querySelector('.stock-data');
                if (priceElement) {
                    const priceText = priceElement.textContent.replace('$', '');
                    price = parseFloat(priceText) || 0;
                } else {
                    price = 0;
                }
                console.log("Using extracted price:", price);
            }
            
            console.log(`Selected: ${symbol}, Shares: ${maxShares}, Price: ${price}`);
            
            // Update hidden input
            selectedSymbolInput.value = symbol;
            
            // Enable shares input
            sharesInput.disabled = false;
            
            // Set max shares
            sharesInput.max = maxShares;
            sharesInput.placeholder = `Max: ${maxShares} shares`;
            
            // Clear and focus shares input
            sharesInput.value = '';
            sharesInput.focus();
            
            // Store current selection with validated values
            currentSelection = {
                symbol: symbol,
                shares: maxShares,
                price: price
            };
            
            // Hide summary until shares are entered
            sellSummary.style.display = 'none';
        });
    });
    
    // Update summary when shares input changes
    sharesInput.addEventListener('input', function() {
        const shares = parseFloat(this.value) || 0;
        
        // Update button state
        sellButton.disabled = shares <= 0 || !currentSelection;
        
        if (shares > 0 && currentSelection) {
            // Ensure shares don't exceed max
            if (shares > currentSelection.shares) {
                this.value = currentSelection.shares;
            }
            
            // Get safe values with fallbacks
            const price = currentSelection.price > 0 ? currentSelection.price : 0;
            const actualShares = parseFloat(this.value) || 0;
            
            // Calculate values
            const estimatedValue = price * actualShares;
            const tradingFee = estimatedValue * 0.001; // 0.1% fee
            const netProceeds = estimatedValue - tradingFee;
            
            console.log(`Calculation: ${price} Ã— ${actualShares} = $${estimatedValue}`);
            
            // Update summary with safety checks
            estimatedValueSpan.textContent = isNaN(estimatedValue) ? '$0.00' : `$${estimatedValue.toFixed(2)}`;
            tradingFeeSpan.textContent = isNaN(tradingFee) ? '$0.00' : `$${tradingFee.toFixed(2)}`;
            netProceedsSpan.textContent = isNaN(netProceeds) ? '$0.00' : `$${netProceeds.toFixed(2)}`;
            
            // Show summary
            sellSummary.style.display = 'block';
        } else {
            // Hide summary
            sellSummary.style.display = 'none';
        }
    });
    
    // Show emergency submit after 3 seconds
    setTimeout(function() {
        document.getElementById('emergencySubmit').style.display = 'block';
    }, 3000);
    
    // Emergency direct submit handler
    document.getElementById('directSubmitBtn').addEventListener('click', function() {
        const symbol = document.getElementById('directSymbol').value;
        const shares = parseFloat(document.getElementById('directShares').value);
        
        if (!symbol || isNaN(shares) || shares <= 0) {
            alert("Please select a stock and enter a valid number of shares");
            return;
        }
        
        // Manually construct and submit a form
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = "{{ url_for('trading.sell') }}";
        form.style.display = 'none';
        
        const symbolInput = document.createElement('input');
        symbolInput.type = 'hidden';
        symbolInput.name = 'symbol';
        symbolInput.value = symbol;
        form.appendChild(symbolInput);
        
        const sharesInput = document.createElement('input');
        sharesInput.type = 'hidden';
        sharesInput.name = 'shares';
        sharesInput.value = shares;
        form.appendChild(sharesInput);
        
        document.body.appendChild(form);
        
        alert(`Submitting sale: ${shares} shares of ${symbol}`);
        form.submit();
    });
    
    // Fix normal form submission
    const sellForm = document.querySelector('#sellForm');
    if (sellForm) {
        console.log("Form found, adding submit handler");
        
        sellForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Stop default submission
            
            console.log("Form submit triggered");
            
            // Check form validity
            const symbol = selectedSymbolInput.value;
            const shares = parseFloat(sharesInput.value) || 0;
            
            if (!symbol) {
                alert("Please select a stock to sell");
                return false;
            }
            
            if (isNaN(shares) || shares <= 0) {
                alert("Please enter a valid number of shares");
                return false;
            }
            
            console.log(`About to submit: ${shares} shares of ${symbol}`);
            
            // Create a new form and submit it
            const directForm = document.createElement('form');
            directForm.method = 'POST';
            directForm.action = "{{ url_for('trading.sell') }}";
            directForm.style.display = 'none';
            
            const symbolField = document.createElement('input');
            symbolField.type = 'hidden';
            symbolField.name = 'symbol';
            symbolField.value = symbol;
            directForm.appendChild(symbolField);
            
            const sharesField = document.createElement('input');
            sharesField.type = 'hidden';
            sharesField.name = 'shares';
            sharesField.value = shares;
            directForm.appendChild(sharesField);
            
            document.body.appendChild(directForm);
            directForm.submit();
            
            return false; // Prevent original form submission
        });
    } else {
        console.error("Sell form not found!");
    }
});
</script>
{% endblock %}