{% extends "base.html.jinja2" %}

{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: {{ user.text_color if user and user.text_color else '#ffffff' }};
        --card-bg: rgba(0, 0, 0, 0.3);
        --border-color: rgba(255, 255, 255, 0.1);
    }

    .dashboard {
        width: 100%;
        min-height: 100vh;
        padding: 2rem;
        background: 
            radial-gradient(circle at top right, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}15 0%, 
                transparent 60%),
            var(--background-color);
        position: relative;
    }

    .dashboard-header {
        margin-bottom: 2rem;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .card {
        background: var(--card-bg);
        backdrop-filter: blur(10px);
        border: 1px solid var(--border-color);
        border-radius: 24px;
        padding: 2rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--text-color);
    }

    .card-portfolio {
        grid-column: span 5;
    }

    .portfolio-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

    .portfolio-table th {
        text-align: left;
        padding: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
        font-weight: 500;
        text-transform: uppercase;
        font-size: 0.875rem;
    }

    .portfolio-table td {
        padding: 1rem 0.75rem;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .portfolio-table tr td:first-child {
        border-radius: 12px 0 0 12px;
    }

    .portfolio-table tr td:last-child {
        border-radius: 0 12px 12px 0;
    }

    .portfolio-table tr {
        transition: all 0.2s ease;
    }

    .portfolio-table tr:hover td {
        background: rgba(255, 255, 255, 0.05);
    }

    .select-button {
        padding: 0.5rem 1rem;
        background: var(--accent-color);
        color: var(--background-color);
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .select-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba({{ user.accent_color | hex_to_rgb }}, 0.4);
    }

    .card-order {
        grid-column: span 7;
    }

    .order-form {
        display: grid;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-label {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .form-control {
        padding: 1rem;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        color: var(--text-color);
        font-size: 1rem;
        transition: all 0.2s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 2px rgba({{ user.accent_color | hex_to_rgb }}, 0.2);
    }

    .sell-button {
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: var(--background-color);
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1rem;
    }

    .sell-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba({{ user.accent_color | hex_to_rgb }}, 0.4);
    }

    .order-summary {
        margin-top: 1.5rem;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        display: grid;
        gap: 0.75rem;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .summary-row:last-child {
        border-bottom: none;
        font-weight: 600;
    }

    .card-recent {
        grid-column: span 12;
    }

    .recent-orders {
        overflow-x: auto;
    }

    .recent-orders table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

    .recent-orders th {
        text-align: left;
        padding: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
        font-weight: 500;
        text-transform: uppercase;
        font-size: 0.875rem;
    }

    .recent-orders td {
        padding: 1rem 0.75rem;
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .recent-orders tr td:first-child {
        border-radius: 12px 0 0 12px;
    }

    .recent-orders tr td:last-child {
        border-radius: 0 12px 12px 0;
    }

    .recent-orders tr:hover td {
        background: rgba(255, 255, 255, 0.05);
    }

    .positive { color: #4caf50; }
    .negative { color: #f44336; }

    .portfolio-empty {
        padding: 2rem;
        text-align: center;
        color: rgba(255, 255, 255, 0.5);
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        grid-column: span 12;
    }

    .portfolio-empty p {
        margin-bottom: 1.5rem;
    }

    .portfolio-empty a {
        display: inline-block;
        padding: 0.75rem 1.5rem;
        background: var(--accent-color);
        color: var(--background-color);
        text-decoration: none;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .portfolio-empty a:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba({{ user.accent_color | hex_to_rgb }}, 0.4);
    }

    @media (max-width: 1200px) {
        .card-portfolio, .card-order {
            grid-column: span 6;
        }
    }

    @media (max-width: 768px) {
        .card-portfolio, .card-order {
            grid-column: span 12;
        }
        
        .dashboard-grid {
            gap: 1rem;
        }
        
        .dashboard {
            padding: 1rem;
        }
    }
</style>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Sell Stock</h1>
    </div>

    <div class="dashboard-grid">
        {% if portfolio %}
            <div class="card card-portfolio">
                <h2 class="card-title">Your Portfolio</h2>
                <table class="portfolio-table">
                    <thead>
                        <tr>
                            <th>Symbol</th>
                            <th>Shares</th>
                            <th>Current Price</th>
                            <th>Value</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in portfolio %}
                            <tr data-symbol="{{ item.symbol }}" data-shares="{{ item.shares }}" data-price="{{ item.current_price }}">
                                <td>{{ item.symbol }}</td>
                                <td>{{ "%.2f"|format(item.shares) }}</td>
                                <td>${{ "%.2f"|format(item.current_price) }}</td>
                                <td>${{ "%.2f"|format(item.value) }}</td>
                                <td>
                                    <button type="button" class="select-button" data-symbol="{{ item.symbol }}" data-shares="{{ item.shares }}">Select</button>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <div class="card card-order">
                <h2 class="card-title">Sell Order</h2>
                <form method="POST" action="{{ url_for('trading.sell') }}" class="order-form" id="sellForm">
                    <div class="form-group">
                        <label for="symbol" class="form-label">Stock Symbol</label>
                        <select id="symbol" name="symbol" class="form-control" required>
                            <option value="">Select a stock</option>
                            {% for item in portfolio %}
                                <option value="{{ item.symbol }}" {% if item.symbol == preselected_symbol %}selected{% endif %}>
                                    {{ item.symbol }} ({{ item.shares }} shares at ${{ "%.2f"|format(item.current_price) }})
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="shares" class="form-label">Number of Shares</label>
                        <input type="number" id="shares" name="shares" class="form-control" step="0.01" min="0.01" required>
                    </div>

                    <div id="orderSummary" class="order-summary" style="display: none;">
                        <div class="summary-row">
                            <span>Stock:</span>
                            <span id="summarySymbol">-</span>
                        </div>
                        <div class="summary-row">
                            <span>Quantity:</span>
                            <span id="summaryQuantity">-</span>
                        </div>
                        <div class="summary-row">
                            <span>Price per Share:</span>
                            <span id="summaryPrice">-</span>
                        </div>
                        <div class="summary-row">
                            <span>Total Value:</span>
                            <span id="summaryValue">-</span>
                        </div>
                        <div class="summary-row">
                            <span>Trading Fee (0.1%):</span>
                            <span id="summaryFee">-</span>
                        </div>
                        <div class="summary-row">
                            <span>You Receive:</span>
                            <span id="summaryTotal">-</span>
                        </div>
                    </div>

                    <button type="submit" class="sell-button">Sell Stock</button>
                </form>
            </div>

            <div class="card card-recent">
                <h2 class="card-title">Recent Orders</h2>
                <div class="recent-orders">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Symbol</th>
                                <th>Type</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% if recent_orders %}
                                {% for order in recent_orders %}
                                    <tr>
                                        <td>{{ order.Date }}</td>
                                        <td>{{ order.Symbol }}</td>
                                        <td class="{% if order.Type == 'BUY' %}positive{% else %}negative{% endif %}">
                                            {{ order.Type }}
                                        </td>
                                        <td>{{ order.Quantity }}</td>
                                        <td>${{ "%.2f"|format(order.Price) }}</td>
                                        <td>{{ order.Status }}</td>
                                    </tr>
                                {% endfor %}
                            {% else %}
                                <tr>
                                    <td colspan="6" style="text-align: center;">No recent orders</td>
                                </tr>
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        {% else %}
            <div class="portfolio-empty">
                <h2>You don't have any stocks to sell</h2>
                <p>Your portfolio is currently empty. Buy some stocks to get started!</p>
                <a href="{{ url_for('trading.buy') }}">Buy Stocks</a>
            </div>
        {% endif %}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const symbolSelect = document.getElementById('symbol');
        const sharesInput = document.getElementById('shares');
        const orderSummary = document.getElementById('orderSummary');
        const summarySymbol = document.getElementById('summarySymbol');
        const summaryQuantity = document.getElementById('summaryQuantity');
        const summaryPrice = document.getElementById('summaryPrice');
        const summaryValue = document.getElementById('summaryValue');
        const summaryFee = document.getElementById('summaryFee');
        const summaryTotal = document.getElementById('summaryTotal');
        const selectButtons = document.querySelectorAll('.select-button');
        
        // Initialize the form based on URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const preselectedSymbol = urlParams.get('symbol');
        
        if (preselectedSymbol) {
            // Set the dropdown value
            for (let i = 0; i < symbolSelect.options.length; i++) {
                if (symbolSelect.options[i].value === preselectedSymbol) {
                    symbolSelect.selectedIndex = i;
                    break;
                }
            }
            
            // If we have portfolio data for this symbol, set shares to max available
            const portfolioRow = document.querySelector(`tr[data-symbol="${preselectedSymbol}"]`);
            if (portfolioRow) {
                const maxShares = portfolioRow.getAttribute('data-shares');
                sharesInput.value = maxShares;
                sharesInput.max = maxShares;
                
                // Trigger summary update
                updateOrderSummary();
            }
        }
        
        // Handle select button clicks
        selectButtons.forEach(button => {
            button.addEventListener('click', function() {
                const symbol = this.getAttribute('data-symbol');
                const shares = this.getAttribute('data-shares');
                
                // Set the form values
                symbolSelect.value = symbol;
                sharesInput.value = shares;
                sharesInput.max = shares;
                
                // Update the order summary
                updateOrderSummary();
                
                // Scroll to the form
                document.querySelector('.card-order').scrollIntoView({ behavior: 'smooth' });
            });
        });
        
        // Update summary on form changes
        symbolSelect.addEventListener('change', updateOrderSummary);
        sharesInput.addEventListener('input', updateOrderSummary);
        
        function updateOrderSummary() {
            const symbol = symbolSelect.value;
            const shares = parseFloat(sharesInput.value);
            
            if (!symbol || isNaN(shares) || shares <= 0) {
                orderSummary.style.display = 'none';
                return;
            }
            
            // Find the corresponding portfolio item
            const portfolioRow = document.querySelector(`tr[data-symbol="${symbol}"]`);
            if (!portfolioRow) {
                orderSummary.style.display = 'none';
                return;
            }
            
            const price = parseFloat(portfolioRow.getAttribute('data-price'));
            const maxShares = parseFloat(portfolioRow.getAttribute('data-shares'));
            
            // Validate shares input
            if (shares > maxShares) {
                sharesInput.value = maxShares;
                return updateOrderSummary(); // Re-run with corrected value
            }
            
            // Calculate values
            const totalValue = price * shares;
            const tradingFee = totalValue * 0.001; // 0.1%
            const netAmount = totalValue - tradingFee;
            
            // Update summary
            summarySymbol.textContent = symbol;
            summaryQuantity.textContent = shares.toFixed(2);
            summaryPrice.textContent = `$${price.toFixed(2)}`;
            summaryValue.textContent = `$${totalValue.toFixed(2)}`;
            summaryFee.textContent = `$${tradingFee.toFixed(2)}`;
            summaryTotal.textContent = `$${netAmount.toFixed(2)}`;
            
            orderSummary.style.display = 'grid';
        }
        
        // Run initial update
        if (symbolSelect.value && sharesInput.value) {
            updateOrderSummary();
        }
    });
</script>
{% endblock %}