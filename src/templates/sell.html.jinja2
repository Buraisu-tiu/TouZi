{% extends "base.html.jinja2" %}
{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: #fff;
    }

    body {
        background-color: var(--background-color, #0a0a0a);
        color: white;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }

    .dashboard {
        width: 100vw;
        min-height: 100vh;
        margin: 0;
        padding: 2rem;
        background: 
            radial-gradient(circle at top right, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}15 0%, 
                transparent 60%),
            var(--background-color);
        position: relative;
        box-sizing: border-box;
    }

    .dashboard-header {
        margin-bottom: 2rem;
        position: relative;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        display: inline-block;
    }

    .dashboard-title::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 0;
        width: 60px;
        height: 4px;
        background: var(--accent-color);
        border-radius: 2px;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 1.5rem;
        padding: 1rem;
        max-width: 1600px;
        margin: 0 auto;
        align-items: start;
        margin-top: 2rem;
    }

    .card {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 2rem;
        margin: 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
        height: 100%;
    }

    .card:hover {
        transform: translateY(-5px);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin-bottom: 2rem;
    }

    .card-positions {
        grid-column: span 8;
        grid-row: span 1;
    }

    .card-order {
        grid-column: span 4;
        grid-row: span 1;
        height: auto;
    }

    .order-form {
        padding: 1rem;
    }

    .order-form input,
    .order-form select {
        width: 100%;
        padding: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
        -webkit-appearance: none;
        appearance: none;
    }

    .order-form select {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        padding-right: 3rem;
    }

    .order-form label {
        display: block;
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-secondary);
        letter-spacing: 0.5px;
    }

    .order-form button {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        border: none;
        border-radius: 14px;
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        margin-top: 1rem;
    }

    .order-form button:hover {
        transform: translateY(-3px);
        box-shadow: 
            0 10px 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40,
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}60;
    }

    .portfolio-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.75rem;
    }

    .portfolio-table th {
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: rgba(255, 255, 255, 0.7);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .portfolio-table td {
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-top: 1px solid rgba(255, 255, 255, 0.05);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .portfolio-table td:first-child {
        border-top-left-radius: 12px;
        border-bottom-left-radius: 12px;
        border-left: 1px solid rgba(255, 255, 255, 0.05);
    }

    .portfolio-table td:last-child {
        border-top-right-radius: 12px;
        border-bottom-right-radius: 12px;
        border-right: 1px solid rgba(255, 255, 255, 0.05);
    }

    .portfolio-table tbody tr {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .portfolio-table tbody tr:hover td {
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.1);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.2);
    }

    .portfolio-table tbody tr.selected td {
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.15);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .select-action {
        text-align: center;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        background: var(--accent-color);
        color: var(--background-color);
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .select-action:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.4);
    }

    .order-summary {
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 14px;
    }
    
    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255,255,255,0.08);
    }
    
    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: bold;
    }

    .empty-portfolio {
        text-align: center;
        padding: 3rem 2rem;
        color: rgba(255, 255, 255, 0.6);
    }

    .buy-link {
        display: inline-block;
        margin-top: 1rem;
        padding: 0.75rem 1.5rem;
        background: var(--accent-color);
        color: var(--background-color);
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .buy-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.4);
    }

    .alert {
        position: fixed;
        top: 2rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 500;
        backdrop-filter: blur(8px);
        z-index: 1000;
        min-width: 300px;
        text-align: center;
    }

    .alert-success {
        background: rgba(46, 213, 115, 0.1);
        border: 1px solid rgba(46, 213, 115, 0.2);
        color: #2ed573;
    }

    .alert-error {
        background: rgba(255, 71, 87, 0.1);
        border: 1px solid rgba(255, 71, 87, 0.2);
        color: #ff4757;
    }

    .badge-stock, .badge-crypto {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .badge-stock {
        background: rgba(52, 152, 219, 0.2);
        color: #3498db;
    }

    .badge-crypto {
        background: rgba(241, 196, 15, 0.2);
        color: #f1c40f;
    }

    @media (max-width: 1200px) {
        .card-positions, .card-order {
            grid-column: span 12;
        }
    }

    @media (max-width: 768px) {
        .portfolio-table {
            display: block;
            overflow-x: auto;
        }
    }
</style>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Sell Assets</h1>
    </div>

    {% with messages = get_flashed_messages(with_categories=True) %}
        {% if messages %}
            <div class="flash-messages">
            {% for category, message in messages %}
                <div class="alert {% if category == 'success' %}alert-success{% elif category == 'error' %}alert-error{% endif %}">
                {{ message }}
                </div>
            {% endfor %}
            </div>

            <script>
            setTimeout(() => {
                document.querySelectorAll('.alert').forEach(alert => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-20px)';
                setTimeout(() => alert.remove(), 500);
                });
            }, 3000);
            </script>
        {% endif %}
    {% endwith %}

    <div class="dashboard-grid">
        <div class="card card-positions">
            <h2 class="card-title">Your Portfolio</h2>
            
            {% if portfolio_items %}
                <table class="portfolio-table">
                    <thead>
                        <tr>
                            <th>Symbol</th>
                            <th>Type</th>
                            <th>Shares</th>
                            <th>Purchase Price</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in portfolio_items %}
                            <tr class="position-row" data-symbol="{{ item.symbol }}" data-shares="{{ item.shares }}">
                                <td><strong>{{ item.symbol }}</strong></td>
                                <td>
                                    <span class="badge-stock">
                                        Stock
                                    </span>
                                </td>
                                
                                <td>{{ item.shares }}</td>
                                <td>${{ "%.2f"|format(item.purchase_price) }}</td>
                                <td>
                                    <button class="select-action" onclick="selectPosition('{{ item.symbol }}', {{ item.shares }})">
                                        Select
                                    </button>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <div class="empty-portfolio">
                    <p>You don't have any assets in your portfolio.</p>
                    <a href="{{ url_for('trading.buy') }}" class="buy-link">Buy Assets</a>
                </div>
            {% endif %}
        </div>

        <div class="card card-order">
            <h2 class="card-title">Sell Order</h2>
            <form id="sellForm" method="POST" action="{{ url_for('trading.sell') }}" class="order-form">
                <label for="symbol">Asset Symbol</label>
                <select id="symbol" name="symbol" required>
                    <option value="">Select an asset</option>
                    {% for item in portfolio_items %}
    <option value="{{ item.symbol }}" data-max="{{ item.shares }}">
        {{ item.symbol }} - {{ item.shares }} shares
    </option>
{% endfor %}
                </select>

                <label for="shares">
                    Quantity to Sell
                    <span id="maxShares" style="float: right; font-size: 0.8rem; opacity: 0.7;"></span>
                </label>
                <input type="number" id="shares" name="shares" step="0.01" min="0.01" required>

                <div id="orderSummary" class="order-summary" style="display: none;">
                    <div class="order-summary-item">
                        <span>Current Price:</span>
                        <span id="currentPrice">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Estimated Value:</span>
                        <span id="estimatedValue">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Trading Fee:</span>
                        <span id="tradingFee">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>You'll Receive:</span>
                        <span id="netAmount">$0.00</span>
                    </div>
                </div>

                <button type="submit">Sell Now</button>
            </form>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const symbolSelect = document.getElementById('symbol');
    const sharesInput = document.getElementById('shares');
    const maxSharesSpan = document.getElementById('maxShares');
    const orderSummary = document.getElementById('orderSummary');
    const currentPriceSpan = document.getElementById('currentPrice');
    const estimatedValueSpan = document.getElementById('estimatedValue');
    const tradingFeeSpan = document.getElementById('tradingFee');
    const netAmountSpan = document.getElementById('netAmount');
    
    // Handle symbol selection change
    symbolSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const maxShares = selectedOption.dataset.max;
        const symbol = this.value;
        
        if (maxShares) {
            maxSharesSpan.textContent = `Max: ${maxShares}`;
            sharesInput.setAttribute('max', maxShares);
            
            if (parseFloat(sharesInput.value) > parseFloat(maxShares)) {
                sharesInput.value = maxShares;
            }
        } else {
            maxSharesSpan.textContent = '';
            sharesInput.removeAttribute('max');
        }
        
        updateOrderSummary();
    });
    
    // Handle shares input change
    sharesInput.addEventListener('input', updateOrderSummary);
    
    // Function to update the order summary
    function updateOrderSummary() {
        const symbol = symbolSelect.value;
        const shares = parseFloat(sharesInput.value) || 0;
        
        if (symbol && shares > 0) {
            const selectedOption = symbolSelect.options[symbolSelect.selectedIndex];
            const assetType = selectedOption.dataset.type;
            
            // Fetch current price and calculate order summary
            fetch('/api/order_summary', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    symbol: selectedSymbol,
                    quantity: shares
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Extract the numeric values from the formatted strings
                    const estimatedPrice = parseFloat(data.estimated_price.replace('$', ''));
                    const tradingFee = parseFloat(data.trading_fee.replace('$', ''));
                    
                    // Calculate the values for a sell order
                    const currentPrice = estimatedPrice / shares;
                    const netAmount = estimatedPrice - tradingFee;
                    
                    // Update the summary display
                    currentPriceSpan.textContent = `$${currentPrice.toFixed(2)}`;
                    estimatedValueSpan.textContent = data.estimated_price;
                    tradingFeeSpan.textContent = data.trading_fee;
                    netAmountSpan.textContent = `$${netAmount.toFixed(2)}`;
                    
                    orderSummary.style.display = 'block';
                } else {
                    orderSummary.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                orderSummary.style.display = 'none';
            });
        } else {
            orderSummary.style.display = 'none';
        }
    }
    
    // Form validation before submission
    document.getElementById('sellForm').addEventListener('submit', function(e) {
        const symbol = symbolSelect.value;
        const shares = parseFloat(sharesInput.value);
        const selectedOption = symbolSelect.options[symbolSelect.selectedIndex];
        const maxShares = parseFloat(selectedOption.dataset.max || 0);
        
        if (!symbol || shares <= 0) {
            e.preventDefault();
            alert('Please select an asset and enter a valid quantity to sell');
            return false;
        }
        
        if (shares > maxShares) {
            e.preventDefault();
            alert(`You cannot sell more than ${maxShares} shares`);
            return false;
        }
        
        // Allow the form to submit if everything is valid
        return true;
    });
});

// Function to select a position from the table
function selectPosition(symbol, maxShares) {
    const symbolSelect = document.getElementById('symbol');
    const sharesInput = document.getElementById('shares');
    
    // Find the option with the matching symbol
    for (let i = 0; i < symbolSelect.options.length; i++) {
        if (symbolSelect.options[i].value === symbol) {
            symbolSelect.selectedIndex = i;
            break;
        }
    }
    
    // Set the shares input to the max value
    sharesInput.value = maxShares;
    
    // Update the max shares display
    document.getElementById('maxShares').textContent = `Max: ${maxShares}`;
    
    // Update the order summary
    const event = new Event('change');
    symbolSelect.dispatchEvent(event);
    
    // Highlight the selected row
    document.querySelectorAll('.position-row').forEach(row => {
        row.classList.remove('selected');
    });
    
    document.querySelector(`.position-row[data-symbol="${symbol}"]`).classList.add('selected');
    
    // Scroll to the sell form
    document.querySelector('.card-order').scrollIntoView({
        behavior: 'smooth', 
        block: 'start'
    });
}
</script>
{% endblock %}