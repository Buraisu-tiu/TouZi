{% extends "base.html.jinja2" %}

{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: {{ user.text_color if user and user.text_color else '#ffffff' }};
        --card-bg: rgba(0, 0, 0, 0.3);
        --border-color: rgba(255, 255, 255, 0.1);
    }

    .dashboard {
        width: 100%;
        min-height: calc(100vh - 80px);
        padding: 2rem;
        background: 
            linear-gradient(to bottom,
                var(--background-color),
                color-mix(in srgb, var(--background-color), var(--accent-color) 3%)
            );
        position: relative;
        z-index: 0;
    }

    .dashboard::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 0% 0%, 
                color-mix(in srgb, var(--accent-color) 15%, transparent) 0%,
                transparent 50%),
            radial-gradient(circle at 100% 100%, 
                color-mix(in srgb, var(--accent-color) 10%, transparent) 0%,
                transparent 50%);
        opacity: 0.5;
        z-index: -2;
    }

    .dashboard::after {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(rgba(0, 0, 0, 0.4) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 0, 0, 0.4) 1px, transparent 1px);
        background-size: 50px 50px;
        opacity: 0.1;
        z-index: -1;
        pointer-events: none;
    }

    .dashboard-header {
        max-width: 1400px;
        margin: 0 auto 2rem;
        padding: 2rem;
        background: var(--card-bg);
        border-radius: 24px;
        border: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-content h1 {
        font-size: 2rem;
        margin: 0;
        background: linear-gradient(to right, var(--text-color), rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .header-content p {
        margin: 0.5rem 0 0;
        color: rgba(255, 255, 255, 0.7);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        max-width: 1400px;
        margin: 0 auto 2rem;
        position: relative;
        z-index: 1;
    }

    .stat-card {
        background: color-mix(in srgb, var(--card-bg) 97%, var(--accent-color));
        backdrop-filter: blur(10px);
        box-shadow: 
            0 4px 20px rgba(0, 0, 0, 0.2),
            inset 0 0 0 1px rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 16px;
        padding: 2rem;
        overflow: hidden;
        position: relative;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255, 255, 255, 0.1),
            transparent
        );
        transition: 0.5s;
    }

    .stat-card:hover::before {
        left: 100%;
    }

    .stat-label {
        font-size: 0.875rem;
        color: rgba(255, 255, 255, 0.6);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 1rem;
    }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin-top: 0.75rem;
        font-family: 'SF Mono', monospace;
        line-height: 1.4;
    }

    .stat-helper {
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.5);
        margin-top: 0.75rem;
        line-height: 1.4;
    }

    .main-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .chart-section, .activity-section {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 
            0 4px 20px rgba(0, 0, 0, 0.2),
            inset 0 0 0 1px rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 1.5rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .activity-item {
        padding: 1rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        display: grid;
        grid-template-columns: auto 1fr auto;
        gap: 1rem;
        align-items: center;
        transition: all 0.3s ease;
    }

    .activity-item:hover {
        transform: translateX(5px);
        background: color-mix(in srgb, var(--accent-color) 5%, rgba(0, 0, 0, 0.3));
    }

    .activity-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        background: var(--accent-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }

    .action-button {
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        border: none;
        cursor: pointer;
    }

    .primary-button {
        background: var(--accent-color);
        color: var(--background-color);
    }

    .secondary-button {
        background: rgba(255, 255, 255, 0.1);
        color: var(--text-color);
    }

    @media (max-width: 1200px) {
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .main-content {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 768px) {
        .dashboard-header {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="dashboard">
    <div class="dashboard-header">
        <div class="header-content">
            <h1>Welcome back, {{ user.username }}</h1>
            <p>Your portfolio overview and recent activity</p>
        </div>
        <div class="header-actions">
            <a href="{{ url_for('trading.buy') }}" class="action-button primary-button">Trade Now</a>
        </div>
    </div>

    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-label">Available Cash</div>
            <div class="stat-value">${{ "%.2f"|format(user_portfolio.available_cash) }}</div>
            <div class="stat-helper">Your current liquid balance</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Portfolio Value</div>
            <div class="stat-value">${{ "%.2f"|format(user_portfolio.total_value) }}</div>
            <div class="stat-helper">Total value of cash + investments</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Invested Value</div>
            <div class="stat-value">${{ "%.2f"|format(user_portfolio.invested_value) }}</div>
            <div class="stat-helper">Current value of your stock/crypto positions</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Active Positions</div>
            <div class="stat-value">{{ user_portfolio.active_positions }}</div>
            <div class="stat-helper">Number of different assets held</div>
        </div>
        
        <!-- JINJA DEBUG START for today_pl_raw -->
        <!-- user_portfolio type: {{ user_portfolio.__class__.__name__ if user_portfolio is defined else "UNDEFINED" }} -->
        <!-- user_portfolio is mapping: {{ user_portfolio is mapping }} -->
        {% if user_portfolio is defined and user_portfolio is mapping %}
        <!-- user_portfolio keys: {{ user_portfolio.keys() | list }} -->
        <!-- 'today_pl_raw' in user_portfolio: {{ 'today_pl_raw' in user_portfolio }} -->
        <!-- value of today_pl_raw: {{ user_portfolio.get('today_pl_raw', 'NOT_FOUND_WITH_GET') }} -->
        {% else %}
        <!-- user_portfolio is not a mapping or not defined -->
        {% endif %}
        <!-- JINJA DEBUG END -->

        <div class="stat-card">
            <div class="stat-label">Today's P/L</div>
            <div class="stat-value {% if user_portfolio.get('today_pl_raw', 0) > 0 %}positive{% elif user_portfolio.get('today_pl_raw', 0) < 0 %}negative{% endif %}">
                {{ user_portfolio.today_pl_str }}
            </div>
            <div class="stat-helper">Your portfolio's change today</div>
        </div>
    </div>

    <div class="main-content">
        <div class="chart-section">
            <div class="section-title">
                <span>Portfolio Performance</span>
                <a href="{{ url_for('portfolio.view_portfolio', user_id=session.get('user_id')) }}" class="action-button secondary-button">View Details</a>
            </div>
            <div id="portfolioChart" style="width: 100%; height: 400px;"></div>
        </div>

        <div class="activity-section">
            <div class="section-title">
                <span>Recent Activity</span>
            </div>
            <div class="activity-list">
                {% if recent_orders %}
                    {% for order in recent_orders %}
                        <div class="activity-item">
                            <div class="activity-icon" style="background: {{ 'rgba(0, 255, 0, 0.2)' if order.Type == 'BUY' else 'rgba(255, 0, 0, 0.2)' }}">
                                {% if order.Type == 'BUY' %}📈{% else %}📉{% endif %}
                            </div>
                            <div>
                                <div style="font-weight: 500;">
                                    <span style="color: {{ '#00ff88' if order.Type == 'BUY' else '#ff4466' }}">
                                        {{ order.Type }}
                                    </span> 
                                    {{ order.Symbol }}
                                </div>
                                <div style="color: rgba(255, 255, 255, 0.6); font-size: 0.9rem;">
                                    {{ order.Quantity }} shares at ${{ order.Price }}
                                </div>
                            </div>
                            <div style="color: rgba(255, 255, 255, 0.6); font-size: 0.9rem;">
                                {{ order.Date }}
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="activity-item" style="justify-content: center; text-align: center;">
                        No recent activity
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    fetch('/api/portfolio/history')
        .then(response => response.json())
        .then data => {
            const dates = data.map(point => point.date);
            const values = data.map(point => point.total_value);

            const trace = {
                x: dates,
                y: values,
                name: 'Account Balance',
                type: 'scatter',
                mode: 'lines',
                fill: 'tozeroy',
                line: {
                    color: getComputedStyle(document.documentElement)
                        .getPropertyValue('--accent-color')
                        .trim(),
                    width: 3
                },
                fillcolor: `${getComputedStyle(document.documentElement)
                    .getPropertyValue('--accent-color')
                    .trim()}15`
            };

            const layout = {
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                margin: { t: 20, r: 20, b: 40, l: 60 },
                showlegend: false,
                xaxis: {
                    showgrid: false,
                    color: 'rgba(255,255,255,0.6)',
                    tickformat: '%m/%d',
                    title: 'Date'
                },
                yaxis: {
                    showgrid: true,
                    gridcolor: 'rgba(255,255,255,0.1)',
                    color: 'rgba(255,255,255,0.6)',
                    tickprefix: '$',
                    tickformat: ',.2f',
                    title: 'Account Balance'
                },
                font: {
                    color: 'rgba(255,255,255,0.6)'
                }
            };

            const config = {
                responsive: true,
                displayModeBar: false
            };

            Plotly.newPlot('portfolioChart', [trace], layout, config);
        })
        .catch(error => console.error('Error loading portfolio history:', error));
});
</script>

{% endblock %}