{% extends "base.html.jinja2" %}
{% block content %}
<style>
    .dashboard {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2.5rem;
        background: radial-gradient(circle at top right, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}10,
            transparent 60%),
            radial-gradient(circle at bottom left,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}08,
            transparent 60%);
    }

    .profile-card {
        background: linear-gradient(120deg, 
            rgba(255,255,255,0.1), 
            rgba(255,255,255,0.05) 30%,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}08 50%,
            rgba(255,255,255,0.05) 85%),
            rgba(255,255,255,0.03);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 24px;
        padding: 2rem;
        margin-bottom: 2.5rem;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .profile-header {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .profile-picture {
        width: 120px;
        height: 120px;
        border-radius: 24px;
        object-fit: cover;
        border: 2px solid {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        box-shadow: 0 0 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40;
        transition: transform 0.3s ease;
    }

    .profile-picture:hover {
        transform: scale(1.05);
    }

    .profile-info {
        flex-grow: 1;
    }

    .profile-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(45deg, #fff, {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .balance {
        font-size: 1.5rem;
        margin-top: 0.5rem;
        color: rgba(255,255,255,0.9);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .badges-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }

    .badge-card {
        background: rgba(255,255,255,0.03);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 16px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .badge-card:hover {
        transform: translateY(-5px);
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }

    .badge-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        margin-bottom: 0.75rem;
    }

    .portfolio-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.75rem;
        margin: 2rem 0;
    }

    .portfolio-table th {
        padding: 1.25rem;
        background: rgba(255,255,255,0.05);
        font-weight: 600;
        letter-spacing: 0.5px;
        text-align: left;
        color: rgba(255,255,255,0.7);
    }

    .portfolio-table td {
        padding: 1.25rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }

    .portfolio-table tbody tr:hover td {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
        transform: scale(1.01);
    }

    .portfolio-summary {
        background: linear-gradient(120deg, 
            rgba(255,255,255,0.1), 
            rgba(255,255,255,0.05) 30%,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}08 50%,
            rgba(255,255,255,0.05) 85%),
            rgba(255,255,255,0.03);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 24px;
        padding: 2.5rem;
        text-align: center;
        margin-top: 2.5rem;
    }

    .summary-label {
        font-size: 1.25rem;
        color: rgba(255,255,255,0.7);
        margin-bottom: 1rem;
    }

    .total-value {
        font-size: 3rem;
        font-weight: 700;
        background: linear-gradient(45deg, #fff, {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1.5rem;
    }

    .leaderboard-button {
        display: inline-block;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        text-decoration: none;
        border-radius: 14px;
        font-weight: 600;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .leaderboard-button:hover {
        transform: translateY(-3px);
        box-shadow: 
            0 10px 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40,
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}60;
    }

    @media (max-width: 768px) {
        .dashboard {
            padding: 1.5rem;
        }

        .profile-header {
            flex-direction: column;
            text-align: center;
        }

        .profile-picture {
            width: 100px;
            height: 100px;
        }

        .profile-title {
            font-size: 2rem;
        }

        .portfolio-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }
    }

    .dev-tools {
        background: rgba(255,255,255,0.05);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 16px;
        padding: 1.5rem;
        margin-top: 2rem;
    }

    .dev-tools h2 {
        font-size: 1.5rem;
        color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        margin-bottom: 1rem;
    }

    .dev-tools input {
        background: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 8px;
        padding: 0.5rem;
        color: white;
        margin-bottom: 0.5rem;
    }

    .dev-tools button {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .dev-tools button:hover {
        opacity: 0.8;
    }
</style>

<div class="dashboard">
    <div class="profile-card">
        <div class="profile-header">
            <img src="{{ user.profile_picture }}" alt="Profile Picture" class="profile-picture">
            <div class="profile-info">
                <h1 class="profile-title">{{ user.username }}'s Portfolio</h1>
                <div class="balance">Account Balance: ${{ user.balance }}</div>
            </div>
        </div>
    </div>

    <div class="badges-grid">
        {% for badge in badges %}
        <div class="badge-card">
            <h3 class="badge-title">{{ badge.name }}</h3>
            <p>{{ badge.description }}</p>
        </div>
        {% endfor %}
    </div>

    <table class="portfolio-table">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Type</th>
                <th>Quantity</th>
                <th>Purchase Price</th>
                <th>Current Price</th>
                <th>Total Value</th>
                <th>Profit/Loss</th>
                <th>P/L %</th>
            </tr>
        </thead>
        <tbody>
            {% for asset in portfolio %}
            <tr>
                <td>{{ asset.symbol }}</td>
                <td>{{ asset.asset_type|capitalize }}</td>
                <td>{{ asset.shares }}</td>
                <td>${{ asset.purchase_price }}</td>
                <td>${{ asset.latest_price }}</td>
                <td>${{ asset.value }}</td>
                <td>${{ ((asset.latest_price - asset.purchase_price) * asset.shares) | round(2) }}</td>
                <td>
                    {% if asset.purchase_price != 0 %}
                    {{ (((asset.latest_price - asset.purchase_price) / asset.purchase_price) * 100) | round(2) }}%
                    {% else %}
                    N/A
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div class="portfolio-summary">
        <h2 class="summary-label">Total Portfolio Value</h2>
        <div class="total-value">${{ total_value }}</div>
        <a href="{{ url_for('leaderboard.leaderboard') }}" class="leaderboard-button">Back to Leaderboard</a>
    </div>
    
    {% if user.username == 'xiao' %}
    <div class="dev-tools">
        <h2>Dev Tools</h2>
        <div>
            <input type="text" id="devSymbol" placeholder="Stock Symbol">
            <input type="number" id="devQuantity" placeholder="Quantity">
            <button onclick="addStock()">Add Stock</button>
        </div>
        <div>
            <input type="number" id="devBalance" placeholder="New Balance">
            <button onclick="updateBalance()">Update Balance</button>
        </div>  
        <div>
            <input type="text" id="devBadge" placeholder="Badge Name">
            <button onclick="addBadge()">Add Badge</button>
        </div>

        <div>User ID: {{ user.user_id }}</div>
    </div>
    {% endif %}

    {% if is_developer %}
        <a href="{{ url_for('portfolio.developer_tools') }}" class="btn btn-primary mt-3">Developer Tools</a>
    {% endif %}

    <script>
        const currentUser Id = '{{ user.user_id }}'; // Ensure this is set correctly
        console.log('Current User ID:', currentUser Id);

        async function addStock() {
            if (currentUser_Id !== 'xiao') {
                alert('Unauthorized: Dev tools are only available for xiao');
                return;
            }
            
            const symbol = document.getElementById('devSymbol').value.trim();
            const quantity = document.getElementById('devQuantity').value;
            
            if (!symbol || !quantity) {
                alert('Please fill in all fields');
                return;
            }
            
            console.log('Adding stock:', { symbol, quantity });
            
            try {
                const response = await fetch('/api/dev/add-stock', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        user_id: currentUser Id,  // Use currentUser Id here
                        symbol: symbol,
                        quantity: parseFloat(quantity) 
                    }),
                });
                
                const data = await response.json();
                console.log('Server response:', data);
                
                if (response.ok) {
                    alert('Stock added successfully');
                    location.reload();
                } else {
                    alert(`Failed to add stock: ${data.error}`);
                }
            } catch (error) {
                console.error('Error adding stock:', error);
                alert('Error adding stock: ' + error.message);
            }
        }
        
        async function updateBalance() {
            if (currentUser Id !== 'xiao') {
                alert('Unauthorized: Dev tools are only available for xiao');
                return;
            }
            
            const balance = document.getElementById('devBalance').value;
            
            if (!balance) {
                alert('Please enter a balance');
                return;
            }
            
            console.log('Updating balance to:', balance);
            
            try {
                const response = await fetch('/api/dev/update-balance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        user_id: currentUser Id,  // Use currentUser Id here
                        balance: parseFloat(balance) 
                    }),
                });
                
                const data = await response.json();
                console.log('Server response:', data);
                
                if (response.ok) {
                    alert('Balance updated successfully');
                    location.reload();
                } else {
                    alert(`Failed to update balance: ${data.error}`);
                }
            } catch (error) {
                console.error('Error updating balance:', error);
                alert('Error updating balance: ' + error.message);
            }
        }
        
        async function addBadge() {
            if (currentUser Id !== 'xiao') {
                alert('Unauthorized: Dev tools are only available for xiao');
                return;
            }
            
            const badge = document.getElementById('devBadge').value.trim();
            
            if (!badge) {
                alert('Please enter a badge name');
                return;
            }
            
            console.log('Adding badge:', badge);
            
            try {
                const response = await fetch('/api/dev/add-badge', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        user_id: currentUser Id,  // Use currentUser Id here
                        badge: badge 
                    }),
                });
                
                const data = await response.json();
                console.log('Server response:', data);
                
                if (response.ok) {
                    alert('Badge added successfully');
                    location.reload();
                } else {
                    alert(`Failed to add badge: ${data.error}`);
                }
            } catch (error) {
                console.error('Error adding badge:', error);
                alert('Error adding badge: ' + error.message);
            }
        }
    </script>
</div>
{% endblock %}