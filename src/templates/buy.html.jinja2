{% extends "base.html.jinja2" %}
{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: #fff;
    }

    body {
        background-color: var(--background-color, #0a0a0a);
        color: white;
        font-family: 'Inter', sans-serif;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease;
    }

    .dashboard {
        max-width: 100%;
        margin: 0 auto;
        padding: 2.5rem;
        background: radial-gradient(circle at top right, var(--accent-color)15, transparent 60%),
                  radial-gradient(circle at bottom left, #23a6d510, transparent 50%);
        min-height: 100vh;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        grid-auto-rows: minmax(min-content, max-content);
        gap: 1.5rem;
    }

    .card {
        background: linear-gradient(120deg, 
            rgba(255,255,255,0.05), 
            rgba(255,255,255,0.02) 30%,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}08 50%,
            rgba(255,255,255,0.02) 85%),
            rgba(255,255,255,0.02);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 24px;
        padding: 1.75rem;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        height: 100%;
    }

    /* Portfolio card - takes 4 columns */
    .card-portfolio {
        grid-column: span 4;
        grid-row: span 1;
    }

    /* Order form card - takes 4 columns, taller */
    .card-order {
        grid-column: span 4;
        grid-row: span 2;
    }

    /* Watchlist card - takes 4 columns */
    .card-watchlist {
        grid-column: span 4;
        grid-row: span 1;
    }

    /* Recent orders card - takes full width, shorter height */
    .card-recent-orders {
        grid-column: span 12;
        grid-row: span 1;
    }

    /* Card hover effect */
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255,255,255,0.1),
            transparent
        );
        transition: 0.5s;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 
            0 20px 40px rgba(0,0,0,0.2),
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}20;
    }

    .card:hover::before {
        left: 100%;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        background: linear-gradient(to right, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}80);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
    }

    .card-title::before {
        content: '';
        display: inline-block;
        width: 8px;
        height: 24px;
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        margin-right: 12px;
        border-radius: 4px;
    }

    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }
     
    .stat-item {
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 16px;
        padding: 1.25rem;
        transition: all 0.3s ease;
    }
     
    .stat-value.positive {
        color: #4caf50;
    }
     
    .stat-value.negative {
        color: #f44336;
    }
    
    .stat-item:hover {
        transform: translateY(-3px);
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: rgba(255,255,255,0.7);
        font-weight: 500;
        letter-spacing: 0.5px;
    }
    
    .stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin-top: 0.75rem;
        background: linear-gradient(45deg, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .order-form input,
    .order-form select {
        width: 100%;
        padding: 1rem 1.25rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 14px;
        color: #fff;
        font-size: 1rem;
        transition: all 0.3s ease;
        margin-bottom: 1rem;
    }
    
    .order-form input:hover,
    .order-form select:hover {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }
    
    .order-form input:focus,
    .order-form select:focus {
        outline: none;
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}15;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        box-shadow: 0 0 0 4px {{ user.accent_color if user and user.accent_color else '#64ffda' }}20;
    }
    
    .order-form button,
    .add-to-watchlist {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        border: none;
        border-radius: 14px;
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        margin-top: 1rem;
    }
    
    .order-form button::before,
    .add-to-watchlist::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255,255,255,0.2),
            transparent
        );
        transition: 0.5s;
    }
    
    .order-form button:hover::before,
    .add-to-watchlist:hover::before {
        left: 100%;
    }
    
    .order-form button:hover,
    .add-to-watchlist:hover {
        transform: translateY(-3px);
        box-shadow: 
            0 10px 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40,
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}60;
    }
    
    .watchlist-items {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1rem;
    }

    .watchlist-item {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 1rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 14px;
        transition: all 0.3s ease;
        height: 100%;
    }
    
    .watchlist-item:hover {
        transform: translateY(-5px);
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }

    .watchlist-symbol {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .watchlist-price {
        margin-top: 0.5rem;
        font-size: 1.125rem;
    }
    
    .recent-orders {
        overflow-x: auto;
    }

    .recent-orders table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.75rem;
    }

    .recent-orders th,
    .recent-orders td {
        padding: 1.25rem;
        background: rgba(255,255,255,0.03);
        border-top: 1px solid rgba(255,255,255,0.08);
        border-bottom: 1px solid rgba(255,255,255,0.08);
    }

    .recent-orders th:first-child,
    .recent-orders td:first-child {
        border-left: 1px solid rgba(255,255,255,0.08);
        border-radius: 12px 0 0 12px;
    }

    .recent-orders th:last-child,
    .recent-orders td:last-child {
        border-right: 1px solid rgba(255,255,255,0.08);
        border-radius: 0 12px 12px 0;
    }
    
    .recent-orders tbody tr {
        transition: all 0.3s ease;
    }
    
    .recent-orders tbody tr:hover td {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }
    
    .recent-orders th {
        font-weight: 600;
        background: rgba(255,255,255,0.05);
        letter-spacing: 0.5px;
        text-align: left;
    }
    
    .positive { color: #4caf50; }
    .negative { color: #f44336; }
    
    .order-summary {
        background: rgba(255,255,255,0.03);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 14px;
        padding: 1.25rem;
        margin: 1.25rem 0;
    }
    
    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255,255,255,0.08);
    }
    
    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: bold;
    }

    .dashboard-header {
        margin-bottom: 2rem;
        position: relative;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        display: inline-block;
    }

    .dashboard-title::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 0;
        width: 60px;
        height: 4px;
        background: var(--accent-color);
        border-radius: 2px;
    }

    /* Responsive adjustments */
    @media (max-width: 1200px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 6;
        }
        .card-order {
            grid-row: span 1;
        }
    }

    @media (max-width: 768px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 12;
        }
        .dashboard-grid {
            gap: 1rem;
        }
        .stat-grid {
            grid-template-columns: 1fr;
        }
    }

    :root {
    --success-color: #2ed573;
    --error-color: #ff4757;
    --accent-color: #1e90ff;
}

/* Fixed flash message at the top */
.alert {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%);
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 500;
    backdrop-filter: blur(8px);
    animation: slideDown 0.5s ease-out;
    z-index: 1000;
    min-width: 300px;
    text-align: center;
}

.alert-success {
    background: rgba(46, 213, 115, 0.1);
    border: 1px solid rgba(46, 213, 115, 0.2);
    color: var(--success-color);
}

.alert-error {
    background: rgba(255, 71, 87, 0.1);
    border: 1px solid rgba(255, 71, 87, 0.2);
    color: var(--error-color);
}

/* Popup notification in bottom-right */
.success-popup {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--accent-color);
    color: white;
    padding: 1rem 2rem;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
}

.success-popup.show {
    transform: translateY(0);
    opacity: 1;
}

</style>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Buy Assets</h1>
    </div>
    
    {% with messages = get_flashed_messages(with_categories=True) %}
        {% if messages %}
            <div class="flash-messages">
            {% for category, message in messages %}
                <div class="alert {% if category == 'success' %}alert-success{% elif category == 'error' %}alert-error{% endif %}">
                {{ message }}
                </div>
            {% endfor %}
            </div>

            <!-- Auto-hide messages after a few seconds -->
            <script>
            setTimeout(() => {
                document.querySelectorAll('.alert').forEach(alert => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-20px)';
                setTimeout(() => alert.remove(), 500);
                });
            }, 3000);
            </script>
        {% endif %}
    {% endwith %}



    <div class="dashboard-grid">
        <div class="card card-portfolio">
            <h2 class="card-title">Your Portfolio</h2>
            <div class="stat-grid">
                {% for key, value in user_portfolio.items() %}
                    <div class="stat-item">
                        <div class="stat-label">{{ key }}</div>
                        <div class="stat-value {% if key == "Today's Change" %}{% if value.startswith('+') %}positive{% elif value.startswith('-') %}negative{% endif %}{% endif %}">
                            {{ value }}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="card card-order">
            <h2 class="card-title">Place Order</h2>
            <form method="POST" action="{{ url_for('trading.buy') }}" class="order-form" id="buyForm">
                <label for="symbol">Symbol</label>
                <input type="text" id="symbol" name="symbol" required>
                
                <label for="shares">Quantity</label>
                <input type="number" id="shares" name="shares" step="0.01" min="0.01" required>
                
                <label for="asset_type">Asset Type</label>
                <select id="asset_type" name="asset_type" required>
                    <option value="stock">Stock</option>
                    <option value="crypto">Cryptocurrency</option>
                </select>
                
                <div id="orderSummary" class="order-summary" style="display: none;">
                    <h3 class="text-lg font-semibold mb-2">Order Summary</h3>
                    <div class="order-summary-item">
                        <span>Estimated Price:</span>
                        <span id="estimatedPrice">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Trading Fee:</span>
                        <span id="tradingFee">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Total:</span>
                        <span id="totalCost">$0.00</span>
                    </div>
                </div>
                
                <button type="submit">Place Order</button>
            </form>
            <button id="addToWatchlist" class="add-to-watchlist">Add to Watchlist</button>
        </div>
        
        
        <div class="card card-watchlist">
            <h2 class="card-title">Watchlist</h2>
            <div id="watchlistContainer" class="watchlist-items">
                {% if watchlist %}
                    {% for item in watchlist %}
                        <div class="watchlist-item">
                            <div class="watchlist-symbol">{{ item.symbol }}</div>
                            <div class="watchlist-price {% if item.change_percentage > 0 %}positive{% elif item.change_percentage < 0 %}negative{% endif %}">
                                {{ item.price_change }}
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div>No items in your watchlist.</div>
                {% endif %}
            </div>
        </div>
        
        <div class="card card-recent-orders">
            <h2 class="card-title">Recent Orders</h2>
            <div class="recent-orders">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Symbol</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for order in recent_orders %}
                            <tr>
                                <td>{{ order.Date }}</td>
                                <td>{{ order.Symbol }}</td>
                                <td>{{ order.Type }}</td>
                                <td>{{ order.Quantity }}</td>
                                <td>{{ order.Status }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('buyForm');
        const symbolInput = document.getElementById('symbol');
        const sharesInput = document.getElementById('shares');
        const assetTypeSelect = document.getElementById('asset_type');
        const orderSummary = document.getElementById('orderSummary');
        const estimatedPriceSpan = document.getElementById('estimatedPrice');
        const tradingFeeSpan = document.getElementById('tradingFee');
        const totalCostSpan = document.getElementById('totalCost');
        const addToWatchlistBtn = document.getElementById('addToWatchlist');

        function updateOrderSummary() {
            const symbol = symbolInput.value.trim();
            const shares = parseFloat(sharesInput.value);
            const assetType = assetTypeSelect.value;

            if (symbol && shares > 0) {
                fetch('/api/order_summary', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        symbol: symbol,
                        quantity: shares,
                        asset_type: assetType
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        orderSummary.style.display = 'none';
                        alert(data.error);
                    } else {
                        estimatedPriceSpan.textContent = data.estimated_price;
                        tradingFeeSpan.textContent = data.trading_fee;
                        totalCostSpan.textContent = data.total;
                        orderSummary.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    orderSummary.style.display = 'none';
                });
            } else {
                orderSummary.style.display = 'none';
            }
        }

        symbolInput.addEventListener('input', updateOrderSummary);
        sharesInput.addEventListener('input', updateOrderSummary);
        assetTypeSelect.addEventListener('change', updateOrderSummary);

        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (confirm('Are you sure you want to place this order?')) {
                this.submit();
            }
        });

        addToWatchlistBtn.addEventListener('click', function() {
            const symbol = symbolInput.value.trim();
            const assetType = assetTypeSelect.value;

            if (symbol) {
                fetch('/api/add_to_watchlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
            print(f"Buying shares of {symbol} at {price} for user {user_id}")  # Debugging
                    },
                    body: JSON.stringify({
                        symbol: symbol,
                        asset_type: assetType
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Added to watchlist!');
                        location.reload();  // Refresh the page to update the watchlist
                    } else {
                        alert(data.error || 'Failed to add to watchlist');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while adding to watchlist');
                });
            } else {
                alert('Please enter a symbol to add to the watchlist');
            }
        });
    });

    document.querySelectorAll('.stat-value').forEach(el => {
        const value = parseFloat(el.textContent.replace(/[^0-9.-]/g, ''));
        if (value > 50) el.classList.add('positive');
        if (value < 0) el.classList.add('negative');
    });

    
    
    document.getElementById("buyForm").addEventListener("submit", function(event) {
        console.log("Buy form submitted!");
    });
</scrip>
{% endblock %}