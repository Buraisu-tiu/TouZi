{% extends "base.html.jinja2" %}
{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: #fff;
    }

    body {
        background-color: var(--background-color, #0a0a0a);
        color: white;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }

    .dashboard {
        width: 100vw;
        min-height: 100vh;
        margin: 0;
        padding: 2rem;
        background: 
            radial-gradient(circle at top right, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}15 0%, 
                transparent 60%),
            var(--background-color);
        position: relative;
        box-sizing: border-box;
    }

    .dashboard::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(
            circle at 50% 50%,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}10 0%,
            transparent 70%
        );
        pointer-events: none;
        animation: pulse 8s ease-in-out infinite;
        z-index: 0;
    }

    @keyframes pulse {
        0%, 100% { 
            opacity: 0.3;
            transform: scale(1);
        }
        50% { 
            opacity: 0.7;
            transform: scale(1.2);
        }
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 1.5rem;
        padding: 1rem;
        max-width: 1600px;
        margin: 0 auto;
        align-items: start;
        margin-top: 2rem;
    }

    .card {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 2rem;
        margin: 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
        height: 100%;
    }

    .card:hover {
        transform: translateY(-5px);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin-bottom: 2rem;
    }

    .stat-value {
        font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        font-size: 1.5rem;
        font-weight: 600;
        letter-spacing: -0.5px;
    }

    .stat-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        opacity: 0.7;
    }

    .order-form input,
    .order-form select {
        width: 100%;
        padding: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
        -webkit-appearance: none;
        appearance: none;
    }

    .order-form select {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        padding-right: 3rem;
    }
    
    .order-form input:hover,
    .order-form select:hover {
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.1);
        border-color: var(--accent-color);
    }
    
    .order-form input:focus,
    .order-form select:focus {
        outline: none;
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.15);
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.2);
    }

    .order-form label {
        display: block;
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-secondary);
        letter-spacing: 0.5px;
    }

    .card-portfolio {
        grid-column: span 6;
        grid-row: span 1;
        height: auto;
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .portfolio-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .portfolio-user {
        flex: 1;
    }

    .portfolio-username {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        color: #fff;
    }

    .portfolio-user-stats {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 0.25rem;
    }

    .portfolio-balance {
        text-align: right;
    }

    .balance-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .balance-amount {
        font-size: 1.5rem;
        font-weight: 700;
        color: #fff;
        margin-top: 0.25rem;
    }

    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        padding: 1rem;
    }

    .stat-item {
        position: relative;
        overflow: hidden;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 1.5rem;
        height: auto;
    }

    .stat-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg,
            transparent,
            rgba(255, 255, 255, 0.05));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .stat-item:hover::before {
        opacity: 1;
    }

    .card-order {
        grid-column: span 6;
        grid-row: span 1;
        height: auto;
    }

    .card-watchlist {
        grid-column: span 12;
        grid-row: span 1;
    }

    .card-recent-orders {
        grid-column: span 12;
        grid-row: span 1;
    }

    .watchlist-items {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 1.5rem;
        padding: 1rem;
    }

    .watchlist-item {
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .watchlist-data {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .empty-watchlist {
        text-align: center;
        padding: 2rem;
        color: var(--text-color-muted, rgba(255,255,255,0.6));
        font-style: italic;
        background: rgba(255,255,255,0.03);
        border-radius: 12px;
        border: 1px dashed rgba(255,255,255,0.1);
    }

    .value-positive {
        color: #00ff88 !important;
        text-shadow: 0 0 15px rgba(0, 255, 136, 0.5);
        font-weight: 600;
    }

    .value-negative {
        color: #ff4466 !important;
        text-shadow: 0 0 15px rgba(255, 68, 102, 0.5);
        font-weight: 600;
    }

    .stat-value.positive {
        color: #4caf50;
    }
     
    .stat-value.negative {
        color: #f44336;
    }
    
    .order-form {
        padding: 1rem;
    }

    .order-summary {
        margin: 0;
        height: fit-content;
        position: sticky;
        top: 2rem;
    }

    .submit-button {
        margin-top: 2rem;
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: var(--background-color);
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .submit-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba({{ user.accent_color | hex_to_rgb }}, 0.4);
    }

    .order-summary {
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary h3 {
        margin-bottom: 1rem;
        font-size: 1.1rem;
        color: var(--accent-color);
    }

    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: 600;
    }

    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        margin-top: 1.5rem;
    }

    @media (max-width: 1200px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 6;
        }
        .card-order {
            grid-row: span 1;
        }
    }

    @media (max-width: 768px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 12;
        }
        .dashboard-grid {
            gap: 1rem;
        }
        .stat-grid {
            grid-template-columns: 1fr;
        }
        
        .dashboard-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .dashboard-actions {
            margin-left: 0;
        }

        .buy-form-container {
            grid-template-columns: 1fr;
        }
        .order-summary {
            position: static;
        }
    }

    :root {
    --success-color: #2ed573;
    --error-color: #ff4757;
    --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
}

.alert {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%);
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 500;
    backdrop-filter: blur(8px);
    animation: slideDown 0.5s ease-out;
    z-index: 1000;
    min-width: 300px;
    text-align: center;
}

.alert-success {
    background: rgba(46, 213, 115, 0.1);
    border: 1px solid rgba(46, 213, 115, 0.2);
    color: var(--success-color);
}

.alert-error {
    background: rgba(255, 71, 87, 0.1);
    border: 1px solid rgba(255, 71, 87, 0.2);
    color: var(--error-color);
}

.success-popup {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--accent-color);
    color: white;
    padding: 1rem 2rem;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
}

.success-popup.show {
    transform: translateY(0);
    opacity: 1;
}

</style>

<div class="dashboard">
    <div class="dashboard-header" style="margin-bottom: 3rem; display: flex; justify-content: space-between; align-items: center;">
        <h1 class="dashboard-title">Buy Assets</h1>
        <div class="dashboard-actions" style="margin-left: auto;">
            <div class="user-balance" style="font-size: 1.25rem; font-weight: 600;">
                Available Balance: ${{ "%.2f"|format(user.balance|default(0)) }}
            </div>
        </div>
    </div>

    <div class="dashboard-grid">
        <!-- Order Form Card - Make it span the full width now -->
        <div class="card card-order" style="grid-column: span 12;">
            <h2 class="card-title">Place Buy Order</h2>
            <div class="buy-form-container">
                <form method="POST" action="{{ url_for('trading.buy') }}" class="order-form">
                    <label for="symbol">Stock Symbol</label>
                    <input type="text" id="symbol" name="symbol" value="{{ symbol if symbol else '' }}" placeholder="Enter stock symbol (e.g., AAPL)" required>
                    
                    <!-- Completely rebuilt Watchlist Button -->
                    <button type="button" id="watchlistButton" class="nav-button btn-outline" style="margin-top: 1rem; width: 100%; padding: 0.8rem 0; background: rgba(0, 0, 0, 0.3); color: var(--text-color); border: 1px solid var(--accent-color); transition: all 0.3s ease;">
                        <span id="watchlistButtonText">Add to Watchlist</span>
                        <span id="watchlistButtonIcon" style="margin-left: 0.5rem;">+</span>
                    </button>
                    
                    <label for="quantity">Number of Shares</label>
                    <input type="number" id="quantity" name="quantity" step="0.01" min="0.01" placeholder="Enter quantity" required>
                    
                    <button type="submit" class="submit-button">Place Buy Order</button>
                </form>

                <div id="orderSummary" class="order-summary" style="display: none;">
                    <h3>Order Summary</h3>
                    <div class="order-summary-item">
                        <span>Estimated Price:</span>
                        <span id="estimatedPrice">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Trading Fee:</span>
                        <span id="tradingFee">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Total Cost:</span>
                        <span id="totalCost">$0.00</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Watchlist Card -->
        <div class="card card-watchlist">
            <h2 class="card-title">Watchlist</h2>
            <div id="watchlistContainer" class="watchlist-items">
                {% if watchlist_items %} {# Changed from 'watchlist' to 'watchlist_items' to match trading.py context #}
                    {% for item in watchlist_items %}
                        <div class="watchlist-item">
                            <div class="watchlist-symbol">{{ item.symbol }}</div>
                            <div class="watchlist-data">
                                <div class="watchlist-stat">
                                    <span class="stat-value">{{ item.current_price }}</span>
                                    <span class="stat-label">Current Price</span>
                                </div>
                                <div class="watchlist-stat">
                                    <span class="stat-value {% if item.change_percentage > 0 %}value-positive{% elif item.change_percentage < 0 %}value-negative{% endif %}">
                                        {# Change from using format directly to first check if values are numbers #}
                                        {{ item.price_change }} ({{ "%.3f"|format(item.change_percentage|float) }}%)
                                    </span>
                                    <span class="stat-label">24h Change</span>
                                </div>
                                {# Monthly change was not in the provided watchlist_items structure from trading.py, so removed for now #}
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-watchlist">
                        Add stocks to your watchlist to monitor them here
                    </div>
                {% endif %}
            </div>
        </div>
        
        <!-- Recent Orders Card -->
        <div class="card card-recent-orders">
            <h2 class="card-title">Recent Orders</h2>
            <div class="recent-orders">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Symbol</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% if recent_orders %}
                            {% for order in recent_orders %}
                                <tr>
                                    <td>{{ order.Date }}</td>
                                    <td>{{ order.Symbol }}</td>
                                    <td class="{% if order.Type == 'BUY' %}value-positive{% else %}value-negative{% endif %}">
                                        {{ order.Type }}
                                    </td>
                                    <td>{{ order.Quantity }}</td>
                                    <td>{{ order.Status }}</td>
                                </tr>
                            {% endfor %}
                        {% else %}
                            <tr>
                                <td colspan="5" class="empty-watchlist">No recent orders to display</td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const symbolInput = document.getElementById('symbol');
        const quantityInput = document.getElementById('quantity');
        const orderSummary = document.getElementById('orderSummary');
        const estimatedPriceSpan = document.getElementById('estimatedPrice');
        const tradingFeeSpan = document.getElementById('tradingFee');
        const totalCostSpan = document.getElementById('totalCost');
        
        // Fixed watchlist functionality with expanded error handling and fallback endpoints
        const watchlistButton = document.getElementById('watchlistButton');
        const watchlistButtonText = document.getElementById('watchlistButtonText');
        const watchlistButtonIcon = document.getElementById('watchlistButtonIcon');
        
        if (watchlistButton) {
            watchlistButton.addEventListener('click', function() {
                // Get stock symbol
                const symbol = symbolInput.value.trim().toUpperCase();
                
                console.log('=== WATCHLIST BUTTON CLICKED ===');
                console.log(`Symbol entered: "${symbol}"`);
                
                if (!symbol) {
                    console.warn('No symbol entered, aborting watchlist add operation');
                    alert('Please enter a stock symbol first');
                    return;
                }
                
                // Show loading state
                watchlistButtonText.textContent = 'Adding...';
                watchlistButtonIcon.textContent = '⏳';
                watchlistButton.disabled = true;
                
                console.log(`🔍 Attempting to add ${symbol} to watchlist`);
                console.log(`User agent: ${navigator.userAgent}`);
                console.log(`Current page: ${window.location.href}`);
                
                // Try multiple endpoints in sequence
                tryAddToWatchlist(symbol, [
                    '/api/watchlist/add',
                    '/api/watchlist',
                    '/watchlist/add'
                ]);
            });
            
            // Function to try multiple endpoints with enhanced error logging
            async function tryAddToWatchlist(symbol, endpoints) {
                if (endpoints.length === 0) {
                    // All endpoints failed
                    console.error('❌ ALL ENDPOINTS FAILED - Unable to add to watchlist');
                    console.error('No more endpoints to try. Request chain terminated.');
                    
                    // Make a diagnostic request to log errors server-side
                    try {
                        await fetch('/api/debug/watchlist', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                symbol: symbol,
                                error: 'All endpoints failed',
                                userAgent: navigator.userAgent,
                                timestamp: new Date().toISOString()
                            })
                        });
                    } catch (e) {
                        console.error('Failed to send debug information:', e);
                    }
                    
                    watchlistButtonText.textContent = 'Add to Watchlist';
                    watchlistButtonIcon.textContent = '+';
                    watchlistButton.disabled = false;
                    alert('Failed to add to watchlist. Please try again later.');
                    return;
                }
                
                const endpoint = endpoints[0];
                console.log(`🌐 Trying endpoint: ${endpoint} (${endpoints.length} remaining)`);
                
                try {
                    // Determine the appropriate payload format based on the endpoint
                    let payload;
                    if (endpoint === '/api/watchlist') {
                        payload = { action: 'add', symbol: symbol };
                    } else {
                        payload = { symbol: symbol };
                    }
                    
                    console.log(`📤 Sending payload to ${endpoint}:`, JSON.stringify(payload));
                    
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(payload),
                        credentials: 'same-origin'
                    });
                    
                    console.log(`📥 Response from ${endpoint}:`, response.status, response.statusText);
                    
                    // Log response details
                    const responseHeaders = {};
                    for (const [key, value] of response.headers.entries()) {
                        responseHeaders[key] = value;
                    }
                    console.log('Response headers:', responseHeaders);
                    
                    // Log error details if response is not OK
                    if (!response.ok) {
                        const errorDetail = {
                            endpoint: endpoint,
                            status: response.status,
                            statusText: response.statusText,
                            headers: responseHeaders
                        };
                        
                        console.error('Error details:', JSON.stringify(errorDetail, null, 2));
                        
                        // Try to get response text for more details
                        try {
                            const errorText = await response.text();
                            console.error('Error response:', errorText);
                            
                            // Send diagnostic info to server
                            await fetch('/api/debug/watchlist', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                symbol: symbol,
                                endpoint: endpoint,
                                error: 'HTTP error',
                                status: response.status,
                                errorText: errorText,
                                userAgent: navigator.userAgent
                            })
                        });
                        
                        } catch (textError) {
                            console.error('Could not get response text:', textError);
                        }
                        
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    // Parse response as JSON
                    let data;
                    try {
                        data = await response.json();
                        console.log('Response data:', data);
                    } catch (jsonError) {
                        console.error('Failed to parse JSON response:', jsonError);
                        throw new Error('Invalid JSON response');
                    }
                    
                    if (data.success) {
                        // Success!
                        watchlistButtonText.textContent = 'Added to Watchlist';
                        watchlistButtonIcon.textContent = '★';
                        watchlistButton.style.backgroundColor = 'var(--accent-color)';
                        watchlistButton.style.color = 'var(--background-color)';
                        
                        // Show success alert 
                        alert(`${symbol} added to your watchlist!`);
                        
                        // Reload after a short delay
                        setTimeout(() => { window.location.reload(); }, 1000);
                    } else {
                        console.error('API reported failure:', data.error || 'Unknown error');
                        throw new Error(data.error || 'Unknown error');
                    }
                } catch (error) {
                    console.error(`Error with endpoint ${endpoint}:`, error);
                    console.error('Error stack:', error.stack);
                    
                    // Try next endpoint
                    tryAddToWatchlist(symbol, endpoints.slice(1));
                }
            }
        }
        
        // Original order summary functionality 
        let updateTimer = null;

        async function updateOrderSummary() {
            const symbol = symbolInput.value.trim().toUpperCase();
            const quantity = parseFloat(quantityInput.value);

            if (symbol && quantity > 0) {
                try {
                    const response = await fetch('/api/order_summary', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            symbol: symbol,
                            quantity: quantity
                        }),
                    });
                    
                    const data = await response.json();
                    if (data.error) {
                        orderSummary.style.display = 'none';
                        console.error(data.error);
                    } else {
                        estimatedPriceSpan.textContent = data.estimated_price;
                        tradingFeeSpan.textContent = data.trading_fee;
                        totalCostSpan.textContent = data.total;
                        orderSummary.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Error:', error);
                    orderSummary.style.display = 'none';
                }
            } else {
                orderSummary.style.display = 'none';
            }
        }

        // Debounce function to limit the rate of API calls
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), delay);
            };
        }

        // Update order summary when symbol or quantity changes
        const debounceUpdate = debounce(updateOrderSummary, 300);
        symbolInput.addEventListener('input', debounceUpdate);
        quantityInput.addEventListener('input', debounceUpdate);
        
        // When there's an error, don't redirect to portfolio, just show error message
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            updateTimer = setTimeout(updateOrderSummary, 500);
        }
    });
</script>
{% endblock %}