{% extends "base.html.jinja2" %}
{% block content %}
<style>
    :root {
        --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
        --background-color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        --text-color: #fff;
    }

    body {
        background-color: var(--background-color, #0a0a0a);
        color: white;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }

    .dashboard {
        width: 100vw;
        min-height: 100vh;
        margin: 0;
        padding: 2rem;
        background: 
            radial-gradient(circle at top right, 
                {{ user.accent_color if user and user.accent_color else '#64ffda' }}15 0%, 
                transparent 60%),
            var(--background-color);
        position: relative;
        box-sizing: border-box;
    }

    .dashboard::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(
            circle at 50% 50%,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}10 0%,
            transparent 70%
        );
        pointer-events: none;
        animation: pulse 8s ease-in-out infinite;
        z-index: 0;
    }

    @keyframes pulse {
        0%, 100% { 
            opacity: 0.3;
            transform: scale(1);
        }
        50% { 
            opacity: 0.7;
            transform: scale(1.2);
        }
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 1.5rem;
        padding: 1rem;
        max-width: 1600px;
        margin: 0 auto;
        align-items: start;
        margin-top: 2rem;
    }

    .card {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 2rem;
        margin: 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
        height: 100%;
    }

    .card:hover {
        transform: translateY(-5px);
        border-color: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.3);
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin-bottom: 2rem;
    }

    .stat-value {
        font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        font-size: 1.5rem;
        font-weight: 600;
        letter-spacing: -0.5px;
    }

    .stat-label {
        font-size: 0.85rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        opacity: 0.7;
    }

    .order-form input,
    .order-form select {
        width: 100%;
        padding: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
        -webkit-appearance: none;
        appearance: none;
    }

    .order-form select {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        padding-right: 3rem;
    }
    
    .order-form input:hover,
    .order-form select:hover {
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.1);
        border-color: var(--accent-color);
    }
    
    .order-form input:focus,
    .order-form select:focus {
        outline: none;
        background: rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.15);
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba({{ user.accent_color if user and user.accent_color else '#64ffda' | hex_to_rgb }}, 0.2);
    }

    .order-form label {
        display: block;
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-secondary);
        letter-spacing: 0.5px;
    }

    .card-portfolio {
        grid-column: span 6;
        grid-row: span 1;
        height: auto;
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .portfolio-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .portfolio-user {
        flex: 1;
    }

    .portfolio-username {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        color: #fff;
    }

    .portfolio-user-stats {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 0.25rem;
    }

    .portfolio-balance {
        text-align: right;
    }

    .balance-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .balance-amount {
        font-size: 1.5rem;
        font-weight: 700;
        color: #fff;
        margin-top: 0.25rem;
    }

    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        padding: 1rem;
    }

    .stat-item {
        position: relative;
        overflow: hidden;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 1.5rem;
        height: auto;
    }

    .stat-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg,
            transparent,
            rgba(255, 255, 255, 0.05));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .stat-item:hover::before {
        opacity: 1;
    }

    .card-order {
        grid-column: span 6;
        grid-row: span 1;
        height: auto;
    }

    .card-watchlist {
        grid-column: span 12;
        grid-row: span 1;
    }

    .card-recent-orders {
        grid-column: span 12;
        grid-row: span 1;
    }

    .watchlist-items {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 1.5rem;
        padding: 1rem;
    }

    .watchlist-item {
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .watchlist-data {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .empty-watchlist {
        text-align: center;
        padding: 2rem;
        color: var(--text-color-muted, rgba(255,255,255,0.6));
        font-style: italic;
        background: rgba(255,255,255,0.03);
        border-radius: 12px;
        border: 1px dashed rgba(255,255,255,0.1);
    }

    .value-positive {
        color: #00ff88 !important;
        text-shadow: 0 0 15px rgba(0, 255, 136, 0.5);
        font-weight: 600;
    }

    .value-negative {
        color: #ff4466 !important;
        text-shadow: 0 0 15px rgba(255, 68, 102, 0.5);
        font-weight: 600;
    }

    .stat-value.positive {
        color: #4caf50;
    }
     
    .stat-value.negative {
        color: #f44336;
    }
    
    .order-form {
        padding: 1rem;
    }

    .order-form button,
    .add-to-watchlist {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        border: none;
        border-radius: 14px;
        color: {{ user.background_color if user and user.background_color else '#0a0a0a' }};
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        margin-top: 1rem;
    }
    
    .order-form button::before,
    .add-to-watchlist::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255,255,255,0.2),
            transparent
        );
        transition: 0.5s;
    }
    
    .order-form button:hover::before,
    .add-to-watchlist:hover::before {
        left: 100%;
    }
    
    .order-form button:hover,
    .add-to-watchlist:hover {
        transform: translateY(-3px);
        box-shadow: 
            0 10px 20px {{ user.accent_color if user and user.accent_color else '#64ffda' }}40,
            0 0 0 1px {{ user.accent_color if user and user.accent_color else '#64ffda' }}60;
    }
    
    .recent-orders {
        overflow-x: auto;
        padding: 1rem;
    }

    .recent-orders table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 1rem;
    }

    .recent-orders th,
    .recent-orders td {
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border-top: 1px solid rgba(255,255,255,0.08);
        border-bottom: 1px solid rgba(255,255,255,0.08);
    }

    .recent-orders th:first-child,
    .recent-orders td:first-child {
        border-left: 1px solid rgba(255,255,255,0.08);
        border-radius: 12px 0 0 12px;
    }

    .recent-orders th:last-child,
    .recent-orders td:last-child {
        border-right: 1px solid rgba(255,255,255,0.08);
        border-radius: 0 12px 12px 0;
    }
    
    .recent-orders tbody tr {
        transition: all 0.3s ease;
    }
    
    .recent-orders tbody tr:hover td {
        background: {{ user.accent_color if user and user.accent_color else '#64ffda' }}10;
        border-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }}30;
    }
    
    .recent-orders th {
        font-weight: 600;
        background: rgba(255,255,255,0.05);
        letter-spacing: 0.5px;
        text-align: left;
    }
    
    .positive { color: #4caf50; }
    .negative { color: #f44336; }
    
    .order-summary {
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.08);
        border-radius: 14px;
    }
    
    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    }
    
    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: bold;
    }

    .dashboard-header {
        margin-bottom: 3rem !important;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 24px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, #fff, rgba(255,255,255,0.7));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        display: inline-block;
    }

    .dashboard-title::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 0;
        width: 60px;
        height: 4px;
        background: var(--accent-color);
        border-radius: 2px;
    }

    .submit-button {
        margin-top: 2rem;
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, 
            {{ user.accent_color if user and user.accent_color else '#64ffda' }}90,
            {{ user.accent_color if user and user.accent_color else '#64ffda' }});
        color: var(--background-color);
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .submit-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba({{ user.accent_color | hex_to_rgb }}, 0.4);
    }

    .order-summary {
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary h3 {
        margin-bottom: 1rem;
        font-size: 1.1rem;
        color: var(--accent-color);
    }

    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .order-summary-item:last-child {
        border-bottom: none;
        font-weight: 600;
    }

    .stat-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        margin-top: 1.5rem;
    }

    @media (max-width: 1200px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 6;
        }
        .card-order {
            grid-row: span 1;
        }
    }

    @media (max-width: 768px) {
        .card-portfolio, .card-order, .card-watchlist {
            grid-column: span 12;
        }
        .dashboard-grid {
            gap: 1rem;
        }
        .stat-grid {
            grid-template-columns: 1fr;
        }
        
        .dashboard-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .dashboard-actions {
            margin-left: 0;
        }
    }

    :root {
    --success-color: #2ed573;
    --error-color: #ff4757;
    --accent-color: {{ user.accent_color if user and user.accent_color else '#64ffda' }};
}

.alert {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%);
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 500;
    backdrop-filter: blur(8px);
    animation: slideDown 0.5s ease-out;
    z-index: 1000;
    min-width: 300px;
    text-align: center;
}

.alert-success {
    background: rgba(46, 213, 115, 0.1);
    border: 1px solid rgba(46, 213, 115, 0.2);
    color: var(--success-color);
}

.alert-error {
    background: rgba(255, 71, 87, 0.1);
    border: 1px solid rgba(255, 71, 87, 0.2);
    color: var(--error-color);
}

.success-popup {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--accent-color);
    color: white;
    padding: 1rem 2rem;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
}

.success-popup.show {
    transform: translateY(0);
    opacity: 1;
}

</style>

<div class="dashboard">
    <div class="dashboard-header" style="margin-bottom: 3rem; display: flex; justify-content: space-between; align-items: center;">
        <h1 class="dashboard-title">Buy Assets</h1>
        <div class="dashboard-actions" style="margin-left: auto;">
            <div class="user-balance" style="font-size: 1.25rem; font-weight: 600;">
                Available Balance: ${{ "%.2f"|format(user.balance|default(0)) }}
            </div>
        </div>
    </div>

    <div class="dashboard-grid">
        <!-- Portfolio Card -->
        <div class="card card-portfolio">
            <h2 class="card-title">Your Portfolio Summary</h2>
            <div class="stat-grid">
                <div class="stat-item">
                    <div class="stat-label">Portfolio Value</div>
                    <div class="stat-value">${{ "%.2f"|format(user_portfolio.total_value|default(0)) }}</div>
                    <div class="stat-helper">Total value of your investments</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Cash Balance</div>
                    <div class="stat-value">${{ "%.2f"|format(user.balance|default(0)) }}</div>
                    <div class="stat-helper">Available for trading</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Today's P/L</div>
                    <div class="stat-value {% if user_portfolio.todays_pl|default(0) >= 0 %}value-positive{% else %}value-negative{% endif %}">
                        {{ user_portfolio.todays_pl_str|default('$0.00') }}
                    </div>
                    <div class="stat-helper">Today's profit/loss</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Active Positions</div>
                    <div class="stat-value">{{ user_portfolio.active_positions|default(0) }}</div>
                    <div class="stat-helper">Number of stocks held</div>
                </div>
            </div>
        </div>

        <!-- Order Form Card -->
        <div class="card card-order">
            <h2 class="card-title">Place Buy Order</h2>
            <form method="POST" action="{{ url_for('trading.buy') }}" class="order-form">
                <label for="symbol">Stock Symbol</label>
                <input type="text" id="symbol" name="symbol" value="{{ symbol }}" placeholder="Enter stock symbol (e.g., AAPL)" required>
                
                <!-- Add Watchlist Button -->
                <button type="button" id="addToWatchlist" class="nav-button btn-outline" style="margin-top: 1rem; width: 100%;">
                    Add to Watchlist
                </button>
                
                <label for="shares">Number of Shares</label>
                <input type="number" id="shares" name="shares" step="0.01" min="0.01" placeholder="Enter quantity" required>
                
                <div id="orderSummary" class="order-summary" style="display: none;">
                    <h3>Order Summary</h3>
                    <div class="order-summary-item">
                        <span>Estimated Price:</span>
                        <span id="estimatedPrice">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Trading Fee:</span>
                        <span id="tradingFee">$0.00</span>
                    </div>
                    <div class="order-summary-item">
                        <span>Total Cost:</span>
                        <span id="totalCost">$0.00</span>
                    </div>
                </div>
                
                <button type="submit" class="submit-button">Place Buy Order</button>
            </form>
        </div>

        <!-- Watchlist Card -->
        <div class="card card-watchlist">
            <h2 class="card-title">Watchlist</h2>
            <div id="watchlistContainer" class="watchlist-items">
                {% if watchlist %}
                    {% for item in watchlist %}
                        <div class="watchlist-item">
                            <div class="watchlist-symbol">{{ item.symbol }}</div>
                            <div class="watchlist-data">
                                <div class="watchlist-stat">
                                    <span class="stat-value">{{ item.current_price }}</span>
                                    <span class="stat-label">Current Price</span>
                                </div>
                                <div class="watchlist-stat">
                                    <span class="stat-value {% if item.change_percentage > 0 %}value-positive{% elif item.change_percentage < 0 %}value-negative{% endif %}">
                                        {{ item.price_change }}
                                    </span>
                                    <span class="stat-label">24h Change</span>
                                </div>
                                <div class="watchlist-stat">
                                    <span class="stat-value {% if item.monthly_change > 0 %}value-positive{% elif item.monthly_change < 0 %}value-negative{% endif %}">
                                        {{ item.monthly_change_str }}
                                    </span>
                                    <span class="stat-label">30d Change</span>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="empty-watchlist">
                        Add stocks to your watchlist to monitor them here
                    </div>
                {% endif %}
            </div>
        </div>
        
        <!-- Recent Orders Card -->
        <div class="card card-recent-orders">
            <h2 class="card-title">Recent Orders</h2>
            <div class="recent-orders">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Symbol</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% if recent_orders %}
                            {% for order in recent_orders %}
                                <tr>
                                    <td>{{ order.Date }}</td>
                                    <td>{{ order.Symbol }}</td>
                                    <td class="{% if order.Type == 'BUY' %}value-positive{% else %}value-negative{% endif %}">
                                        {{ order.Type }}
                                    </td>
                                    <td>{{ order.Quantity }}</td>
                                    <td>{{ order.Status }}</td>
                                </tr>
                            {% endfor %}
                        {% else %}
                            <tr>
                                <td colspan="5" class="empty-watchlist">No recent orders to display</td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const symbolInput = document.getElementById('symbol');
        const sharesInput = document.getElementById('shares');
        const orderSummary = document.getElementById('orderSummary');
        const estimatedPriceSpan = document.getElementById('estimatedPrice');
        const tradingFeeSpan = document.getElementById('tradingFee');
        const totalCostSpan = document.getElementById('totalCost');
        const addToWatchlistBtn = document.getElementById('addToWatchlist');

        let updateTimer = null;

        async function updateOrderSummary() {
            const symbol = symbolInput.value.trim().toUpperCase();
            const shares = parseFloat(sharesInput.value);

            if (symbol && shares > 0) {
                try {
                    const response = await fetch('/api/order_summary', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            symbol: symbol,
                            quantity: shares
                        }),
                    });
                    
                    const data = await response.json();
                    if (data.error) {
                        orderSummary.style.display = 'none';
                        console.error(data.error);
                    } else {
                        estimatedPriceSpan.textContent = data.estimated_price;
                        tradingFeeSpan.textContent = data.trading_fee;
                        totalCostSpan.textContent = data.total;
                        orderSummary.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Error:', error);
                    orderSummary.style.display = 'none';
                }
            } else {
                orderSummary.style.display = 'none';
            }
        }

        function debounceUpdate() {
            if (updateTimer) {
                clearTimeout(updateTimer);
            }
            updateTimer = setTimeout(updateOrderSummary, 500);
        }

        symbolInput.addEventListener('input', debounceUpdate);
        sharesInput.addEventListener('input', debounceUpdate);

        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            document.body.appendChild(notification);
            
            notification.offsetHeight;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }

        // Add to Watchlist functionality
        addToWatchlistBtn.addEventListener('click', async function() {
            const symbol = document.getElementById('symbol').value.trim().toUpperCase();

            if (!symbol) {
                alert('Please enter a symbol first');
                return;
            }

            try {
                const response = await fetch('/api/add_to_watchlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        symbol: symbol
                    }),
                });
                
                const data = await response.json();
                if (data.success) {
                    showNotification('✨ Successfully added to watchlist');
                    location.reload();
                } else {
                    showNotification('❌ ' + (data.error || 'Failed to add to watchlist'));
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('❌ An error occurred while adding to watchlist');
            }
        });

        // Fix URL parameter processing
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('symbol')) {
            const symbolInput = document.getElementById('symbol');
            if (symbolInput) {
                symbolInput.value = urlParams.get('symbol');
                // Trigger any dependent calculations
                symbolInput.dispatchEvent(new Event('input'));
            }
        }
        
        if (symbolInput.value && sharesInput.value) {
            updateOrderSummary();
        }
    });
</script>
{% endblock %}